{
  // Place your advent-of-code-cj workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Advent of Code Day": {
    "scope": "python",
    "description": "Scaffold Advent of Code Day",
    "prefix": "aoc-day",
    "body": [
      "import enum",
      "import itertools",
      "import re",
      "from collections import Counter, defaultdict, deque",
      "from dataclasses import dataclass",
      "import more_itertools as mi",
      "from aoc_cj import util",
      "def part_1(txt: str) -> int:",
      "    $0print(txt)",
      "    raise NotImplementedError()",
      "def part_2(txt: str) -> int:",
      "    raise NotImplementedError()",
      "if __name__ == \"__main__\":",
      "    from aocd import data",
      "    print(f\"part_1: {part_1(data)}\")",
      "    print(f\"part_2: {part_2(data)}\")"
    ]
  },
  "Advent of Code Test": {
    "scope": "python",
    "description": "Scaffold Advent of Code Test",
    "prefix": "aoc-test",
    "body": [
      "import pytest",
      "import aoc_cj.aoc20${2:23}.day${1:n} as d",
      "EXAMPLE_INPUT = \"\"\"",
      "${3:sample input}",
      "\"\"\".strip()",
      "def test_part_1() -> None:",
      "    assert d.part_1(EXAMPLE_INPUT) ${4:is None}$0",
      "def test_part_2() -> None:",
      "    assert d.part_2(EXAMPLE_INPUT) ${5:is None}"
    ]
  },
  "Parametrized Test": {
    "scope": "python",
    "description": "Scaffold Parametrized Test",
    "prefix": "param-test",
    "body": [
      "@pytest.mark.parametrize(",
      "    (\"example\", \"expected\"),",
      "    (",
      "        (${2:EXAMPLE_INPUT_1}, ${3:EXPECTED_1}),",
      "        (${4:EXAMPLE_INPUT_2}, ${5:EXPECTED_2}),",
      "    ),",
      ")",
      "def test_${1:FUNCTION}(example: ${6:str}, expected: ${7:TYPE_EXPECTED}) -> None:",
      "    assert d.${1:FUNCTION}(example) == expected$0"
    ]
  }
}
