import pytest

import aoc_cj.aoc2021.day18 as d

EXAMPLE_INPUT_1 = """
[1,1]
[2,2]
[3,3]
[4,4]
""".strip()

EXAMPLE_INPUT_2 = """
[1,1]
[2,2]
[3,3]
[4,4]
[5,5]
""".strip()

EXAMPLE_INPUT_3 = """
[1,1]
[2,2]
[3,3]
[4,4]
[5,5]
[6,6]
""".strip()

EXAMPLE_INPUT_4 = """
[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]
[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]
[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]
[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]
[7,[5,[[3,8],[1,4]]]]
[[2,[2,2]],[8,[8,1]]]
[2,9]
[1,[[[9,3],9],[[9,0],[0,7]]]]
[[[5,[7,4]],7],1]
[[[[4,2],2],6],[8,7]]
""".strip()

EXAMPLE_INPUT_5 = """
[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[9,3],[[9,9],[6,[4,9]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]
""".strip()

EXAMPLE_OUTPUT_5 = "[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]"


@pytest.mark.parametrize(
    ("before", "after"),
    (
        ("[[[[[9,8],1],2],3],4]", "[[[[0,9],2],3],4]"),
        ("[7,[6,[5,[4,[3,2]]]]]", "[7,[6,[5,[7,0]]]]"),
        ("[[6,[5,[4,[3,2]]]],1]", "[[6,[5,[7,0]]],3]"),
        ("[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]", "[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]"),
        ("[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]", "[[3,[2,[8,0]]],[9,[5,[7,0]]]]"),
    ),
)
def test_explode(before: str, after: str):
    before_tree = d.parse(before)
    assert str(before_tree) == before
    before_tree.reduce_once()
    assert str(before_tree) == after


def test_add():
    lhs = d.parse("[[[[4,3],4],4],[7,[[8,4],9]]]")
    rhs = d.parse("[1,1]")
    result = lhs.add(rhs)
    result.reduce()
    assert str(result) == "[[[[0,7],4],[[7,8],[6,0]]],[8,1]]"


@pytest.mark.parametrize(
    ("lines", "expected"),
    (
        (EXAMPLE_INPUT_1, "[[[[1,1],[2,2]],[3,3]],[4,4]]"),
        (EXAMPLE_INPUT_2, "[[[[3,0],[5,3]],[4,4]],[5,5]]"),
        (EXAMPLE_INPUT_3, "[[[[5,0],[7,4]],[5,5]],[6,6]]"),
        (EXAMPLE_INPUT_4, "[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]"),
        (EXAMPLE_INPUT_5, EXAMPLE_OUTPUT_5),
    ),
)
def test_sum_lines(lines: str, expected: str):
    assert str(d.sum_lines(lines.splitlines())) == expected


@pytest.mark.parametrize(
    ("inp", "magnitude"),
    (
        ("[[1,2],[[3,4],5]]", 143),
        ("[[[[0,7],4],[[7,8],[6,0]]],[8,1]]", 1384),
        ("[[[[1,1],[2,2]],[3,3]],[4,4]]", 445),
        ("[[[[3,0],[5,3]],[4,4]],[5,5]]", 791),
        ("[[[[5,0],[7,4]],[5,5]],[6,6]]", 1137),
        ("[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]", 3488),
        (EXAMPLE_OUTPUT_5, 4140),
    ),
)
def test_magnitude(inp: str, magnitude: int):
    assert d.parse(inp).magnitude() == magnitude


def test_a():
    assert d.parta(EXAMPLE_INPUT_5) == 4140


def test_b():
    assert d.partb(EXAMPLE_INPUT_5) == 3993
